import java.util.*;
class Node
{
    int data;
    Node prev;
    Node next;
    Node(int x)
    {
        data=x;
        prev=null;
         next=null;
    }
}
class doublelist
{
    Node head,tail;
    doublelist()
    {
        head=tail=null;
    }
    
    void create(int x)
    {
        Node n=new Node(x);
        if(head==null)
        {
            head=tail=n;
        }
        else
        {
            tail.next=n;
            n.prev=tail;
            tail=n;
        }
    }
    
    void rshow()
    {
        if(head==null)
        {
            System.out.println("List is empty");
            return;
        }
        Node temp=head;
        while(temp!=null)
        {
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
    }
    
    void lshow()
    {
        if(head==null)
        {
            System.out.println("List is empty");
            return;
        }
        Node temp=tail;
        while(temp!=null)
        {
            System.out.print(temp.data+" ");
            temp=temp.prev;
        }
    }
 
    void insertFirst(int x)
    {
        Node n=new Node(x);
        if(head==null)
        {
            head=tail=n;
        }
        else
        {
            head.prev=n;
            n.next=head;
            head=n;
        }
    }

    void insertpos(int val,int pos)
    {
        Node n=new Node(val);
        Node temp=head;
        int count=1;
        while(count<pos && temp.next!=null)
        {
            count++;
            temp=temp.next;
        }
        if(temp.next==null)
        {
            temp.next=n;
            n.prev=temp;
            tail=n;
        }
        else
        {
            n.next=temp;
            n.prev=temp.prev;
            temp.prev.next=n;
            temp.prev=n;
        }
    }

     void deletefirst()
    {
        if(head==null)
        {
            System.out.println("list is empty");
        }
        if(head.next==null)
        {
            head=tail=null;
        }
        else
        {
            Node temp=head;
            head=head.next;
            head.prev=null;
            temp=null;
        }
    }

     void deletepos(int pos)
    {
        Node temp=head;
        int count=1;
        while(count<pos && temp.next!=null)
        {
            count=count+1;
            temp=temp.next;
        }
        if(temp.next==null)
        {
            temp.prev.next=null;
            tail=temp.prev;
            temp=null;
        }
        else
        {
            temp.prev.next=temp.next;
            temp.next.prev=temp.prev;
            temp=null;
        }
    }
     

     void deletelast()
    {
        if(head==null)
        {
            System.out.println("List is empty");
            return;
        }
        if(tail.prev==null)
        {
            head=tail=null;
        }
        else
        {
            Node temp=tail;
            tail=tail.prev;
            tail.next=null;
            temp=null;
        }
    }
}

class DoubleLinkedList
{
    public static void main(String args[])
    {
        Scanner s=new Scanner(System.in);
        doublelist d1=new doublelist();
        for(;;)
        {
            System.out.println("\n1.Create\n2.Forward Traversal\n3.Backward Traversal\n4.Insert at Beggining\n5.Insert at Position\n6.Delete at Beginning\n7.Delete at Position\n8.Delete Last\n9.Exit");
            System.out.println("Enter your choice");
            int ch=s.nextInt();
            if(ch==1)
            {
                int x=s.nextInt();
                 d1.create(x);
            }
            else if(ch==2)
            {
                d1.rshow();
            }
            else if(ch==3)
            {
                d1.lshow();
            }
            else if(ch==4)
            {
                System.out.println("Enter an element");
                int x=s.nextInt();
               d1.insertFirst(x);
            }
            else if(ch==5)
            {
              System.out.println("Enter a element");
              int val=s.nextInt();
              System.out.println("Enter the position");
              int pos=s.nextInt();
              d1.insertpos(val,pos);
            }
            else if(ch==6)
             {
                 d1.deletefirst();
              }
             else if(ch==7)
            {
                System.out.println("Enter a position");
                 int pos=s.nextInt();
                 d1.deletepos(pos);
             }
            else if(ch==8)
            {
                 d1.deletelast();
            }
            else if(ch==9)
            {
                break;
            }
            else
            {
                System.out.println("Invalid choice");
            }
        }
    }
}
