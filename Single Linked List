import java.util.*;
class Node
{
    int data;
    Node next;
    Node(int x)
    {
        data=x;
        next=null;
    }
}
class singleList
{
    Node head,tail;
    singleList()
    {
        head=tail=null;
    }
        void create(int x)
        {
            Node n=new Node(x);
            if(head==null)
            {
                head=tail=n;
            }
            else
            {
                tail.next=n;
                tail=n;
            }
        }
        
        void display()
        {
            if(head==null)
            {
                System.out.println("List is empty");
                return;
            }
            Node temp=head;
             while(temp!=null)
                {
                   System.out.print(temp.data+" ");
                   temp=temp.next;
                }
              //System.out.println(tail.next+" ");
            }
            
          void insertFirst(int x)
          {
            Node n=new Node(x);
            if(head==null)
            {
               head=tail=n;
            }
            n.next=head;
            head=n;
          }

         void insertPos(int val,int pos)
         {
            Node n=new Node(val);
            Node temp=head;
            Node prev=null;
            int count=1;
            while(count<pos && temp.next!=null)
            {
                prev=temp;
                temp=temp.next;
                count++;
            }
            n.next=temp;
            prev.next=n;
         }          

           void deleteFirst()
           {
              if(head==null)
              {
                 System.out.println("List is Empty");
              }
              else
              {
                 System.out.println(head.data+" is deleted");
                 head=head.next;
              }
            }

          void deletepos(int pos)
          {
             Node temp=head;
             Node prev=null;
             int count=1;
             while(count<pos && temp.next!=null)
             {
                count++;
                prev=temp;
                temp=temp.next;
             }
             prev.next=temp.next;
        }

            void deleteLast()
            {
              if(head==null)
              {
                System.out.println("List is empty");
                return;
              }
              Node temp=head;
              if(temp.next==null)
              {
                 System.out.println(temp.data+"is deleted");
                   head=tail=null;
                   return;
               }
              while(temp.next.next!=null)
              {
                  temp=temp.next;
               }
                  System.out.print(temp.next.data+" is deleted");
                  temp.next=null;
                  tail=temp;
            }
        
        
       }
class SingleLLpract
{
    public static void main(String args[])
    {
        Scanner s=new Scanner(System.in);
        singleList s1=new singleList();
        for(;;)
        {
          System.out.println("\n1.Create\n2.Dispaly\n3.Insert First\n4.Insert at Position\n5.Delete First\n6.Delete at Position\n7.Delete Last\n8.Exit");
          System.out.println("Enter your choice:");
          int ch=s.nextInt();
          if(ch==1)
          {
             int x=s.nextInt();
            s1.create(x);
          }
          else if(ch==2)
         {
            s1.display();
         }
         else if(ch==3)
         {
            int x=s.nextInt();
            s1.insertFirst(x);
          }
          else if(ch==4)
          {
             int val=s.nextInt();
             int pos=s.nextInt();
             s1.insertPos(val,pos);
          }
         else if(ch==5)
         {
            s1.deleteFirst();
         }
         
         else if(ch==6)
         {
            System.out.println("Enter a position");
            int pos=s.nextInt();
            s1.deletepos(pos);
         }
         else if(ch==7)
         {
            s1.deleteLast();
         }
         else if(ch==8)
         {
            break;
         }
         else
         {
            System.out.println("Invalid choice");
         }
        }
    }
}

OUTPUT:

1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
1
11

1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
1
22

1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
1
33

1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
1
44

1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
1
55

1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
2
11 22 33 44 55
1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
3
10

1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
2
10 11 22 33 44 55
1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
4
25
4

1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
2
10 11 22 25 33 44 55
1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
5
10 is deleted

1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
2
11 22 25 33 44 55
1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
6
Enter a position
3

1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
2
11 22 33 44 55
1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
7
55 is deleted
1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
2
11 22 33 44
1.Create
2.Dispaly
3.Insert First
4.Insert at Position
5.Delete First
6.Delete at Position
7.Delete Last
8.Exit
Enter your choice:
8
